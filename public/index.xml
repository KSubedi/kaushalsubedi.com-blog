<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaushal Subedi&#39;s Blog</title>
    <link>https://kaushalsubedi.com/blog/</link>
    <description>Recent content on Kaushal Subedi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</managingEditor>
    <webMaster>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</webMaster>
    <copyright>Â© 2015 Kaushal Subedi, All Rights Reserved</copyright>
    <lastBuildDate>Tue, 17 Nov 2015 07:52:27 -0700</lastBuildDate>
    <atom:link href="https://kaushalsubedi.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Why I Switched From Android To iOS And Back (Update: Back Again)</title>
      <link>https://kaushalsubedi.com/blog/2015/11/17/why-i-switched-from-android-to-ios-and-back-and-back-again/</link>
      <pubDate>Tue, 17 Nov 2015 07:52:27 -0700</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2015/11/17/why-i-switched-from-android-to-ios-and-back-and-back-again/</guid>
      <description>

&lt;p&gt;I have been using Android since it was first launched. My first proper smartphone (if you don&amp;rsquo;t count Symbian as smartphone operating system) was T-Mobile myTouch 3G, and since then I have used pretty much all the major mobile operating system and have owned a ton of flagship devices. From the legendary HTC HD2 to Motorola Defy to HTC Sensation to Blackberry Z10 to iPhone 6s, I have used it all. And those aren&amp;rsquo;t all the devices I have used, those are only some I can remember off the top of my head, the whole list would take a blog post of it&amp;rsquo;s own.&lt;/p&gt;

&lt;p&gt;Anyways, I have always been a fan of Android and it&amp;rsquo;s open nature, open filesystem and non-closed ecosystem. I was a big fan of Nokia&amp;rsquo;s Symbian OS back in the days and although bulky, the Nokia N95 was one of the favorite phones I have used. I loved how I could use the filesystem, just download and play MP3 files, and do things as if I were doing them on a computer. When Android was released, I was happy to see another mobile operating system backed by tech giant Google, with open file system unlike Apple&amp;rsquo;s iOS, and full touch screen support.&lt;/p&gt;

&lt;p&gt;History aside, Android was always my thing, and as a developer having a whole lot of open API&amp;rsquo;s that would let you access all of the device&amp;rsquo;s features unlike iOS was quite awesome. Now, I am not saying I never had issues with Android. There are a lot of downsides of using Android, and I am not going to list them all here. But the biggest issue I belive that Android had was that the operating system was never properly optimized for the hardware it would be deployed in. Most Android phones I have used have had tiny little issues, weather it is little battery drains or lag or random bugs here and there. I am sure you can relate if you have used Android for long enough periods of time.&lt;/p&gt;

&lt;p&gt;Another big issue with Android is that most manufacturers that make Android device are not committed to it. We get tons of smartphones every year, but when problems arise after using them for a while, most manufacturers will make you go rounds and pull your hair in order to get the issue resolved. Before I switched to a iPhone recently, I had a Sony Xperia Z3 where the mic would not work when the phone was in speaker mode. The top mic was damaged and I made sure to do every troubleshooting step to make sure it was a hardware issue and not something on the software. Luckily the phone was still under warranty, and I was just hoping to send the phone in and get a replacement.&lt;/p&gt;

&lt;p&gt;Then I realized how bad the &amp;ldquo;support&amp;rdquo; situation on Android land was. I called Sony and explained the issue, and followed their troubleshooting steps with them over the phone even though I had done them already and told them so. After making sure it was the hardware, they said they would start the RMA process to send the device in for repair or replacement. I was in for a shock once I heard that the only option to get the repair done was to send the device myself to Sony, where I would have to pay for the shipping and everything (which I can understand), and it would take 14 days for them to ship it back. They wanted me to stay without a phone for half a month! This was ridiculous but since I had no choice I sent the phone to them. Usually I have a pretty good backup device laying around in cases like that, but at that time the only other good phone I had around was a Blackberry Z10.&lt;/p&gt;

&lt;p&gt;This did make me realize how good Blackberry&amp;rsquo;s operating system was, and got to appreciate a much underappreciated device that Blackberry launched a couple years ago. After getting no response from Sony after two weeks, I decided to give them a call again and see what was going. They said they had no clue and to keep calling back every few days. This was already frustrating enough, and I did call them every few days and their reponse was pretty much the same. They said that their repair center has not updated anything and to check back later. Then all of a sudden after about 26 days after my device was received by them, I get the device in the mail. I am sure if I had called them right then, they would have told me they had no idea either.&lt;/p&gt;

&lt;p&gt;Gladly the phone was working, but I was tired of having to deal with these manufacturers that truly don&amp;rsquo;t care about their customers after they sell the phones. This was not the first time I had run into similar issues, since I had to deal with similar situations with Motorola, HTC, LG and Sony previously. I realized that if it was with Apple, I would have been able to just walk in to an Apple Store and get the device replaced on the spot. So, I went to the nearest T-Mobile store and got an iPhone 6. Even though it was hard to get used to it at first, I loved how it just worked with my Mac, and also how much more reliably it would work. No more random freezes, no more random reboots, no more phone shutting down when you are using GPS and are in the middle of nowhere. I was quite happy with it which is why I ended up upgrading to the iPhone 6S right as soon as it got released.&lt;/p&gt;

&lt;p&gt;The 6S was great, but did not have a lot more new features. Other than the faster Touch ID, there were not a lot of things that were significantly different from the iPhone 6 I had. But the more I used the iPhone, the more frustrating the experience got. Although it was smooth no matter what I was doing and did what it was supposed to do, there were a lot of things I missed from the Android world. If i got a address for a place via text, unlike Android where I could click on the address and choose what app to navigate on, it would just open the default app. There was no concept of default apps for certain tasks, so you were locked down to whatever Apple gave you for most things. You could not even set default browsers. Sharing data between apps was hard, and in some cases almost impossible, when on Android its as easy as pressing a share button and choosing what application to share to.&lt;/p&gt;

&lt;p&gt;After being frustrated with little quirks and limitations of iOS, I finally decided to bite the bullet and order myself a Nexus 6. iPhones have great hardware, and I can tell you right now that there is no other Android phone out there that matches iPhone&amp;rsquo;s in terms of hardware quality and attention to details. But iOS is so locked down that it really makes using the phone a pain unless you only do basic tasks on your phone. For power users, Android is definitely the better choice. And yes, you read that right. I decided to get a Nexus 6 instead of a 6p because of how bad the build quality on the 6p looks (check the ifixit teardown for more in depth look), and it was also half the price. Well, that was enough rant for the day, cannot wait to see how much Android has improved since I left it and cannot wait to see how good the new Android operating system Marsmallow is.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;update-back-to-ios:6866c1b1d24ce1212bbeb06904e0d74f&#34;&gt;Update: Back To iOS&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Okay, so that did not go well. I got the Nexus 6 ad was really happy, however I could not even stand using it for one full day. Problems started when i tried to turn down the brightness, and the screen went all pink. After looking it up online, turns out its a &amp;ldquo;feature&amp;rdquo; and something that happens with all AMOLED displays. Looks like Motorola let people turn their brightness down more than most other phones, which is why you see the pink tint, and I didnt really mind it since it acted like night mode. Then I updated the phone all the way to Android M. Every little incremental upgrade took me like 30 minutes, since it had to &amp;ldquo;Optimize Apps&amp;rdquo; every time. Since this was a one time thing, I did not mind it at all.&lt;/p&gt;

&lt;p&gt;Then came the annoying part, installing all the necessary apps. The Google Play Store would freeze randomly, and the phone was hot enough that i could cook eggs with it. Again, one time thing so didnt mind much, till the phone started rebooting. It rebooted twice after it got really hot when I was trying to install about 30 or so apps (maybe I should have done them one by one?). Randomly app installations will freeze and i would have to cancel and restart it in order for the whole queue of apps to install. And when apps installed, I was getting random errors like &amp;ldquo;Google Play Services Not Installed&amp;rdquo; while trying to open some apps at first.&lt;/p&gt;

&lt;p&gt;After all the crazy adventures in play land, the apps finally installed and my phone finally got a chance to cool down. First thing I noticed was &amp;ldquo;Whoa this is a big screen!&amp;rdquo;, but I knew I was going to get used to it in no time. Then I watched a couple of episodes of a tv show on Netflix and loved the front facing speakers and AMOLED screens. I was trying to talk to someone on Facebook Messenger while watching Netflix, and trying to go back and forth was not as smooth as I thought it would be. Even though I was on latest version of Android with last year&amp;rsquo;s flagship device, it was still lagging a bit and jittery. The lag and jitters seemed to be consistent throughout the operating system, and sometimes even little things like going back to the home screen would lag. Coming back from iOS, this felt really uncomfortable in a way.&lt;/p&gt;

&lt;p&gt;I started missing TouchID after I started using the bank apps. Having to go to my password manager, copying the password, going back to bank app and pasting it just to log in every time was a pain. I know I could have gotten one of the newer Nexus phones with fingerprint sensors, but my quick research showed that none of the bank apps I used supported fingerprint scanners on Android, but all of them did on iOS. Then came the camera, although it was not the worst I have seen, there was a lot left to be desired, mostly on the software side. AOSP Android and specially Nexus phones were never too good about camera, but after 6 major revisions to the OS, it still boggled my mind that Google could not get the camera app right.&lt;/p&gt;

&lt;p&gt;After having to deal with one after another issue, I realised how much compromises I was making by switching to the Nexus. Sure, on paper it might be more powerful and could do more, but practically it felt years behind Apple&amp;rsquo;s offerings. So far, it still feels like no Android manufacturer beats or even comes close to Apple in terms of stability and quality of both hardware and software, and same applies for Mac computers as well (although Microsoft&amp;rsquo;s Surface Book is starting to look better every day). I decided to return my new phone and keep using my 6S. Hopefully one day I can switch back to Android again and not have to deal with those issues.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go (Golang) Sucks! Here&#39;s Why!</title>
      <link>https://kaushalsubedi.com/blog/2015/11/10/golang-sucks-heres-why/</link>
      <pubDate>Tue, 10 Nov 2015 11:59:27 -0700</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2015/11/10/golang-sucks-heres-why/</guid>
      <description>&lt;p&gt;Here we go again, I know what you might be thinking. &amp;ldquo;This guy was ranting about how &lt;a href=&#34;https://kaushalsubedi.com/blog/blog/2014/10/15/node-js-sucks-heres-why/&#34;&gt;Node.js Sucks&lt;/a&gt; a while ago and now he is on about Golang.&amp;rdquo; - sounds like what you were thinking?&lt;/p&gt;

&lt;p&gt;Although I loved the move from Node.js to Golang initially and started using Go for pretty much everything I built, I soon found out about its con&amp;rsquo;s and ran into issues I should not have. Here are some of the reasons I think Golang sucks:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No Generics Support&lt;/strong&gt; : Golang is a great language but it lacks one of the basic features programming languages should have, Generics. While you might argue that it is possible to use &lt;code&gt;interface&lt;/code&gt;s to do what you want to do with generics, the amount of boilerplate code you have to write will get tedious.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Slow JSON Parsing&lt;/strong&gt; : JSON is almost becoming the standard data format to transport data between different layers, mostly because its JavaScript native and most client side applications are built using JavaScript. According to &lt;a href=&#34;http://stackoverflow.com/questions/29282231/go-json-decoding-is-very-slow-what-would-be-a-better-way-to-do-it&#34;&gt;numerous tests&lt;/a&gt; and &lt;a href=&#34;https://code.google.com/p/go/issues/detail?id=5683&#34;&gt;benchmarks&lt;/a&gt;, Golang&amp;rsquo;s JSON parsing is very slow and could cause issues on applications that use a lot of JSON data. So if you were planning on using Golang for backend of your web application, make sure you take this into consideration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Too Much Boilerplate&lt;/strong&gt; : Although it might sound like Golang is a short and simple language at first, which it kind of is, there is  still a lot of boilerplate code you have to go through to get things done. The &lt;code&gt;struct&lt;/code&gt; system works great, however creating structs all over the place might feel tedious compared to something like &lt;code&gt;Object&lt;/code&gt;s in JavaScript. Even though those two are two different concepts, getting the same thing done in Golang seems to take much more boilerplate work than lets say Node.js or most other languages.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bad Dependency Management&lt;/strong&gt; : These days a lot of code is modular, and no one likes to rewrite something that someone else already put out there. While using third party libraries is great, Golang&amp;rsquo;s way of doing that is not so great. Golang uses &lt;code&gt;URL&lt;/code&gt; based dependency imports, which means you can just do &lt;code&gt;go get http://github.com/somename/somelibrary&lt;/code&gt; and import it to your package with &lt;code&gt;import github.com/somename/somelibrary&lt;/code&gt;, there is no way to specify what exact version of the library you want. Since Golang is compiled, you probably don&amp;rsquo;t have to worry about your production app crashing because of some of your dependency updating by itself, you will still have to be careful while distributing the source code so that someone else that tries to compile it doesn&amp;rsquo;t get a version of your dependency that does is not backward compatible with the one you were using originally. Also lack of a central package manager like &lt;code&gt;npm&lt;/code&gt; does not help in this case (although having one has it&amp;rsquo;s own con&amp;rsquo;s).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;No Sub Packaging&lt;/strong&gt; : Golang allows you to create packages on the root level of your application, but that&amp;rsquo;s about where it stops. You cannot have sub packages which makes modularizing some parts of your application difficult. If you were used to keeping your project structure clean by sperating things into folders (packages in golang) and subfolders, the subfolders part will not work in Golang.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Bad Forking Support&lt;/strong&gt; : If you are trying to fork a project, things will be a little bit different in Golang. Since Go uses &lt;code&gt;URL&lt;/code&gt; based packaging structure, you will have to manually rename all the imports from all the files of the package you are forking to match your new &lt;code&gt;URL&lt;/code&gt; if the project imports other packages from itself. Then when you are done working on it, before you send a pull request, you will have to change everything back again. This can be a pain and even though there are workarounds to this it might not be ovious right away to most people beginning with Golang. I have created a little tool called &lt;a href=&#34;https://github.com/KSubedi/gomove&#34;&gt;gomove&lt;/a&gt; that should help with this.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now although all of the issues I mentioned above have workarounds, to a beginner just starting in Golang they might cause some headaches. Hopefully the Golang team will leave the language politics behind and start implementing and fixing things (like generics support) as Go matures.&lt;/p&gt;

&lt;p&gt;A while ago, for some reason I was on this weird quest to find the perfect programming language that I can master and use for everything. Soon, I learnt that no language is perfect and for a reason. Every language is tailored to be used for specific use cases and if language maintaners started focusing on making the language work in every possible scenario, it will turn into a huge mess (im looking at you JavaScript).&lt;/p&gt;

&lt;p&gt;This does not mean I am completely abandoning Golang. Now, I use whatever I feel most productive in for the type of application I am working on. If I am working on a API or simple website, I usually use Node.js since it lets me bootstrap a web based application really quick. If I am working on a command line tool or some networked service, I use Golang. Heck, I even use PHP and Wordpress for some things.&lt;/p&gt;

&lt;p&gt;For people who were like me and are looking for that one perfect language to learn and use on everything, stop looking, you are just wasting your time. Just use whatever you feel the most comfortable in and don&amp;rsquo;t hesitate to learn new technologies and languages. You will be much more productive this way, rather than trying to build a house with paper. The big lesson I learn&amp;rsquo;t was to use the right tool for the right job instead of looking for a swiss army knife.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio Code Key Bindings To Make It Work Like Tab Based Editor</title>
      <link>https://kaushalsubedi.com/blog/2015/11/08/visual-studio-code-key-bindings-to-make-it-work-like-tab-based-editor/</link>
      <pubDate>Sun, 08 Nov 2015 00:00:00 +0000</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2015/11/08/visual-studio-code-key-bindings-to-make-it-work-like-tab-based-editor/</guid>
      <description>&lt;p&gt;Microsoft recently released a new open source text editor called &lt;a href=&#34;https://code.visualstudio.com&#34; target=&#34;_blank&#34;&gt;Visual Studio Code&lt;/a&gt;. It is based on Github&amp;rsquo;s Electron platform and is a cross platform application that runs on Windows, Linux and Mac OS X which is surprising considering it came from Microsoft. Surprisingly, it is a great editor when it comes to working with JavaScript and Node.js and basically anything front end (React, Angular&amp;hellip;).&lt;/p&gt;

&lt;p&gt;One major gripe I had with it that was stopping me from making it my default editor for web application projects was that it used a concept of &amp;ldquo;Working Files&amp;rdquo; instead of tabs like most editors I have come across. It works fine once you get used to it, but since I was not using it as my primary editor for everything, it was hard going back and forth between tab based editor and VS Code. My main issue was that I could not switch between working files easily with the almost universal keyboard command to switch tabs &amp;ldquo;CMD + SHIFT + [&amp;rdquo; and &amp;ldquo;CMD + SHIFT + ]&amp;rdquo;. Also pressing &amp;ldquo;CMD + W&amp;rdquo; would close the file from the editor but not remove it from the &amp;ldquo;Working Files Section&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kaushalsubedi.com/blog/blog/img/visual-studio-code.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;After spending a few minutes looking at the &lt;a href=&#34;https://code.visualstudio.com/Docs/customization/keybindings&#34; target=&#34;_blank&#34;&gt;documentation for key bindings&lt;/a&gt;, I changed a couple of things to make it work like any other tab based editor. Open up your key preferences json file (by going to Preferences -&amp;gt; Keyboard Shortcuts) and paste or add the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mac&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    {
        &amp;quot;key&amp;quot;: &amp;quot;cmd+shift+[&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.files.action.openPreviousWorkingFile&amp;quot;
    },
    {
        &amp;quot;key&amp;quot;: &amp;quot;cmd+shift+]&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.files.action.openNextWorkingFile&amp;quot;
    },
    {
        &amp;quot;key&amp;quot;: &amp;quot;cmd+w&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.files.action.closeFile&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Windows / Linux:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    {
        &amp;quot;key&amp;quot;: &amp;quot;win+shift+[&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.files.action.openPreviousWorkingFile&amp;quot;
    },
    {
        &amp;quot;key&amp;quot;: &amp;quot;win+shift+]&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.files.action.openNextWorkingFile&amp;quot;
    },
    {
        &amp;quot;key&amp;quot;: &amp;quot;win+w&amp;quot;,
        &amp;quot;command&amp;quot;: &amp;quot;workbench.files.action.closeFile&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let me know if you have a better way of doing this or any other suggestions!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I love my new Acer CB3-111 Chromebook</title>
      <link>https://kaushalsubedi.com/blog/2015/02/19/why-i-love-my-new-acer-cb3-111-chromebook/</link>
      <pubDate>Thu, 19 Feb 2015 00:00:00 +0000</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2015/02/19/why-i-love-my-new-acer-cb3-111-chromebook/</guid>
      <description>&lt;p&gt;So I recently got a new Chromebook. If you do not know what a Chromebook is, it is basically a laptop that can run Chrome browser + some more. I was at a Best Buy recently, and saw a nice little white colored plastic computer under the Google logo. It was the Acer CB3-111 that had Intel Baytrail processor and 2GB of Ram. The specs were nothing to be proud of, however after a few minutes of usage I decided to get it for myself. Here is what I love about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Battery Life&lt;/b&gt;: This is one of the biggest reason that got me to buy a Chromebook. The label on the one I bought said it had a battery life of 8 hours, which I was kind of skeptical about. However after bringing it home and using it, I was easily able to get that 8 hours even in full brightness with moderate to heavy usage. With medium brightness (full brightness is too bright), I was able to get around 10-14 hours which was insane for a computer. When I bought my other computer, a Lenovo U530 which had an advertised battery life of 10 hours, I was highly disappointed when in real life usage I got only around 2 hours, so the Chromebook&#39;s battery life was a big surprise to me.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Trackpad and Gestures&lt;/strong&gt;: This is one of the most underrated features of most Chromebooks. The trackpad on my Acer CB3 is big and tracks movements and gestures very good. This is the only thing close to Macbook&#39;s trackpad that I have seen on the market. The gestures to switch tabs and go back and forth work really well and I have been a lot more productive since I started using them.

&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;https://kaushalsubedi.com/blog/blog/img/acer.jpg&#34;/&gt;
&lt;br&gt;&lt;br&gt;

&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: I am sure people are going to argue with me on this one, but this Chromebook is blazing fast. Even though it has a nifty little Intel Celeron N2830Â processor which does not do that well in &lt;a href=&#34;http://www.cpubenchmark.net/cpu.php?cpu=Intel+Celeron+N2830+%40+2.16GHz&#34; target=&#34;_blank&#34;&gt;benchmarks&lt;/a&gt;, I was surprised to see how well it did in real life. I never experienced any lags or delays even when I had 30+ tabs open at once. Even 1080p videos played nice and smooth and I could do pretty much everything I did on the other computer easily without no lags or delays, everything just worked.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concept of Cloud&lt;/strong&gt;: As someone who uses Google services for a lot of things, this Chromebook made me feel at home. Google Drive just worked, my email with Google Apps just worked, and pretty much everything I did on my other computer which is a lot more powerful just worked without a lot of configuration. As soon as i signed in to Chrome, my extensions, password, bookmarks and history just synced over right away. Everything I did was online, and I never felt like I missed out on anything because of Chrome OS. I am a developer and initially I bought this thinking it would be useful for on the go stuff, taking notes at college, and generally accessing things on the go, but recently I have started developing on it. Yes, you read that right, I started developing on a Chromebook. If you are an Android Developer, or lets say Windows Mobile developer, this is oviously not going to work for you. But for a full stack web developer, all I needed to get my development going on a Chromebook was download &lt;a href=&#34;https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en&#34; target=&#34;_blank&#34;&gt;this SSH Client&lt;/a&gt; for Chrome and setup a virtual server from a VPS provider like &lt;a href=&#34;https://neximweb.com/&#34; target=&#34;_blank&#34;&gt;Nexim Web Hositng&lt;/a&gt;Â for developement. Then I just SSH&#39;d into the box and used Vim for development. Oviously you can use online IDE&#39;s like Koding or Nitrous.IO or Cloud9, however since I used to use Vim for the task before I even got the Chromebook, I did not have to change anything.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Applications and Extensions&lt;/b&gt;: When I was using Windows or even Ubuntu, I had to go looking around the web for the right tool to use and had to try a bunch of stuff before finding out which worked the best for me. Chrome OS solves this by making all the applications available on the Chrome Web Store just like in Android or iOS. Being able to see reviews and and comments on the apps really helps, and the best rated and recommended app shows up on the top of the search list which is a huge plus. I needed an app to remotely connect to my server, and found a couple of RDP clients that just worked. Even though Chrome Web Store is relatively new, the number of applications available is growing everyday and I haven&#39;t had trouble finding anything I wanted on the web store. If I have to run Windows applications, I just connect to my Windows computer using Chrome remote access and use it just like it was using my the other computer itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overall, I am very happy with my purchase and I feel like with the upcoming support for Android applications it is going to get even better. All companies are moving their services to the web (even Microsoft moved Office to the web recently) and Chromebooks are the perfect thin clients for the web that just work. They are definitely not for everyone but for I feel like they would be suitable for a large number of people that just need a browser for their tasks. With the variety of specs and options available for Chromebooks nowadays, finding the perfect one to suite your needs is not going to be a difficult task.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Google Cloud App Engine Review, Why Choose It? Because It&#39;s Awesome!</title>
      <link>https://kaushalsubedi.com/blog/2015/01/10/google-cloud-app-engine-review-why-choose-it-because-its-awesome/</link>
      <pubDate>Sat, 10 Jan 2015 00:00:00 +0000</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2015/01/10/google-cloud-app-engine-review-why-choose-it-because-its-awesome/</guid>
      <description>&lt;p&gt;Being a full stack web developer is not easy. You not only have to worry about developing the application itself, but you also have to worry about managing the server stack, implementing a high availability system, configuring a backup system, creating a deployment system and a lot more. While having the knowledge of all these things is good, having to do these every time you start a project can be annoying, specially if it is just a small side project.&lt;/p&gt;

&lt;p&gt;I have worked on big and small projects where I have setup a full high availability system with a custom CDN network and auto scaling on a well known cloud provider&amp;rsquo;s infrastructure, and let me tell you, doing all of this might sound easy to some of you but the process takes a really long time and configuring everything just right takes a lot of work. While this might not be a big deal for a big budget project, this might be the deal breaker for a smaller one. Recently, there has been a rise of a new kind of service in the hosting world, called PAAS. PAAS stands for Platform As A Service and if you have never heard that term before, I would highly suggest looking it up. Basically, a PAAS will let you deploy an application without having to worry about the server management side of things. Depending on what PAAS you choose, they have features like Auto Scaling, easy deployment etc. They are more expensive than traditional Cloud Servers (or VPS&amp;rsquo;s) but will save you a lot of time and money in the long run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kaushalsubedi.com/blog/blog/img/google-datacenter.jpg&#34;/&gt;&lt;/p&gt;

&lt;p&gt;While &lt;a href=&#34;https://www.heroku.com/&#34; target=&#34;_blank&#34;&gt;Heroku&lt;/a&gt; is undoubtedly the most popular PAAS out there, &lt;a href=&#34;https://cloud.google.com/appengine/docs&#34; target=&#34;_blank&#34;&gt;Google App Engine&lt;/a&gt; is a hidden gem in the PAAS world that a lot of developers I know have not even thought about using. While I hadn&amp;rsquo;t used it for a while since it&amp;rsquo;s name was ruined right when it was released because of issues with uptime, deployment and more, I decided to try it again recently, and fell in love. Google App Engine is a part of Google&amp;rsquo;s suite of Cloud Hosting tools, which lets you easily deploy and host applications created in one of the four supported languages, Java, Python, PHP and my favorite &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;Golang&lt;/a&gt;. While the last two are still in Beta, I have had no problems with them so far.&lt;/p&gt;

&lt;p&gt;So why did I just call Google Cloud Platform Awesome in the title of this post? There are a lot of reasons:&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;1) Ease of Use&lt;/h4&gt;
Google Cloud Platform is literally the easiest to learn and use PAAS that I have used. While I am familiar with Heroku, Appfog and a few more, in my opinion, Google App Engine was the easiest to deploy to. After setting up the SDK on my computer after following very easy to read instructions on their website, all I had to do was write a configuration file, and run &lt;em&gt;goapp deploy&lt;/em&gt; to Â deploy my GolangÂ application. No more Puppet configurations, no more Dockerfiles and no more custom shell scripts, the tools that were included in the SDK did everything for me. The SDK (at least for Golang) came with aÂ &lt;em&gt;serve&lt;/em&gt; command that would run a local server that would allow you to develop your application locally before deploying. And the best part was they even took care of tiny little things like recompiling the application and reloading the webserver every time a file changed.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;2) Pricing&lt;/h4&gt;
The pricing of Google App Engine is really competitively priced and is reasonable. I am not going to post the pricing information here since it changes a lot, but you can use their &lt;a href=&#34;https://cloud.google.com/products/calculator/&#34; target=&#34;_blank&#34;&gt;pricing calculator&lt;/a&gt; to figure out the current rates. Oh and did I mention they even have a free tier that is more than suitable for most small side projects?&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;3) Complete Management &amp;amp; Lot&amp;rsquo;s of Features&lt;/h4&gt;
Google App Engine completely removes server management from your todo list (sorry system administrators). It automatically does auto scaling and creates new instances as needed, it automatically handles high availability, it automatically distributes your application to Google&amp;rsquo;s huge CDN network so that your service works really fast from anywhere in the globe ( side note : Google&amp;rsquo;s CDN is the best out of all the CDN&amp;rsquo;s I have had experience with so far) and a lot more. You are only charged for the resources you use and you don&amp;rsquo;t have to worry about your service crashing because it just got to the front page of reddit. Â You also do not have to worry about manually updating the server stack or monitoring the uptime or anything like that. You can also use Google Cloud&amp;rsquo;s Datastore, Memcached and Cloud SQL if you want those to be hosted and managed by Google as well.&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;4) Google&amp;rsquo;s Infrastructure&lt;/h4&gt;
It is no new news that Google is the largest and most visited website in the world. Despite being that, all of their services work really fast and realiably from anywhere in the globe. This must mean something right? Yes, Google has a vast infrastructure distributed throughout the world, and with Google App Engine your applications can leverage the power of their infrastructure. I do not know the exact numbers on how many datacenters they have but a quick Google search should give you an idea of how big their infrastructure is.Â Large companies like SnapChat, Best Buy, Coca Cola etc trust and use Google App Engine as well. While there had been reports of downtimes and reliability issues in the past, after my tests and new reports from other users, I feel like Google would be the company that I can rely the most (after all I use Google for emails, domains, live chat, video calling, phone and a lot of other things).&lt;/p&gt;

&lt;p&gt;&lt;h4&gt;5) True Cloud&lt;/h4&gt;
You see a lot of companies nowadays selling &amp;ldquo;Cloud&amp;rdquo; servers, but have you every wondered how many of them are true clouds? (Hello DigitalOcean). By definition, Cloud Computing means leveraging the power of distributed servers for different purposes, but nowadays there has been a huge rise in the amount of companies that advertise as being cloud when they are just normal Virtual Machines that only reside on one node (Hello Again DigitalOcean). To leverage the power of true cloud, the service must have high availability and should be able to scale as needed. Google App Engine not only has these things, it has ton&amp;rsquo;s of other things like automatic CDN (Content Delivery Network) distributing which make it fit more on the definition of Cloud Computing. Most PAAS do these but so far Google&amp;rsquo;s is the one I&amp;rsquo;ve seen that has the most features of them all.&lt;/p&gt;

&lt;p&gt;While Google App Engine does have it&amp;rsquo;s little quirks like support for only 4 programming languages, usage limitations etc., if your application does not demand more than what it offers and can run under those restrictions, it is the perfect platform for deploying it. And pretty much all PAAS provider&amp;rsquo;s have the limitations (some more than others) that Google&amp;rsquo;s platform has in place. Overall I am really satisfied with my experience so far, and I am going to be moving a lot of my applications over soon. Let me know what you think about Google App Engine, do you think Google App Engine might help you with easier appliation developement?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Stopping / Starting / Rebooting / Migrating Multiple (All) OpenVZ Containers In One Command</title>
      <link>https://kaushalsubedi.com/blog/2014/11/22/stopping-starting-rebooting-migrating-multiple-all-openvz-containers-in-one-command/</link>
      <pubDate>Sat, 22 Nov 2014 00:00:00 +0000</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2014/11/22/stopping-starting-rebooting-migrating-multiple-all-openvz-containers-in-one-command/</guid>
      <description>&lt;p&gt;Working as a systems administrator, there are many times where you want to automate things so that you don&amp;rsquo;t have to do them manually. A lot of times I am working with OpenVZ nodes, I run into situations where I have to run a command in all vm&amp;rsquo;s or reboot all vm&amp;rsquo;s (don&amp;rsquo;t reboot all in production node). Here is a simple linux command that will find all openvz vm&amp;rsquo;s and reboot / restart or do anything with it.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Reboot All Containers&lt;/b&gt;
&lt;div class=&#34;postContent&#34;&gt;
&lt;pre&gt;for VE in $(vzlist -Ha -o veid); do vzctl restart $VE; done&lt;/pre&gt;
&lt;b&gt;StartÂ All Containers&lt;/b&gt;
&lt;pre&gt;for VE in $(vzlist -Ha -o veid); do vzctl start $VE; done&lt;/pre&gt;
&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Migrate All Containers&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;
&amp;nbsp;
&lt;div class=&#34;postContent&#34;&gt;
&lt;pre&gt;for VE in $(vzlist -Ha -o veid); do vzmigrate &amp;ndash;remove-area no &amp;ndash;keep-dst [NODE_IP] $VE; done
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;postBookmarks&#34;&gt;Â Just replace the [NODE_IP] with the ip of the node that you want to migrate them to. Make sure you have keys on the node that you are migrating to so that it doesn&amp;rsquo;t repititively ask you for password.&lt;/div&gt;
&lt;div class=&#34;postBookmarks&#34;&gt;&lt;/div&gt;
&lt;div class=&#34;postBookmarks&#34;&gt;You can pretty much do anything with all the VM&amp;rsquo;s by following the following format:&lt;/div&gt;
&lt;div class=&#34;postBookmarks&#34;&gt;
&lt;div class=&#34;postContent&#34;&gt;
&lt;pre&gt;for VE in $(vzlist -Ha -o veid); do [COMMAND]; done
&lt;/pre&gt;
Just replace the [COMMAND] with the command you want to run for each VM. Use $VE to get the VEID of the container.&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js Sucks! Here&#39;s Why</title>
      <link>https://kaushalsubedi.com/blog/2014/10/15/node-js-sucks-heres-why/</link>
      <pubDate>Wed, 15 Oct 2014 00:00:00 +0000</pubDate>
      <author>kaushal@subedi.co (Kaushal Subedi&#39;s Blog)</author>
      <guid>https://kaushalsubedi.com/blog/2014/10/15/node-js-sucks-heres-why/</guid>
      <description>&lt;p&gt;If you are a web developer, or any developer that has been catching up with latest technologies for that matter, I am sure you know about Node.js. It is a relatively new programming language built on top of Google&amp;rsquo;s V8 Javascript parsing engine that allows you to build cross platform applications. Node.js is widely used as a backend language in a lot of web applications and a lot of big name companies like Paypal have adapted it as well. It is definitely one of the fastest growing programming languages out there right now. Now you might be wondering how it can suck if a lot of big companies are using it. I recently had to use Node.js for few of my projects, and here are some reasons why I think it sucks:&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&lt;em&gt;Disclaimer: All the things I am going to mention are my personal opinions and I may have used some strong language to express my views. You can argue all day about how the things I have mentioned are invalid or are based on personal opinion, but the fact is they are my personal opinions and everyone has rights to think their own way.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1) Callback hell is real:Â &lt;/strong&gt;If you are familiar with Node.js, I am pretty sure you are familiar with callback hell or have at least heard about it. Node.js is built to work asynchronously which means unlike traditional programming languages where you have to wait for one task to finish to start the next one, you pass callbacks (which are basically just functions) that will be executed when the required task is done. If you are new and have never used Node.js this might be confusing to you, but if you have used Node.js then you most likely know how difficult it can be to manage callbacks. Most of the time, you end up with a tree of callbacks. This makes it extremely easy to get lost in the code and makes code reviewing difficult. There are ways to fight callback hell, andÂ &lt;a title=&#34;http://callbackhell.com/&#34; href=&#34;http://callbackhell.com/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://callbackhell.com/&#34;&gt;http://callbackhell.com/&lt;/a&gt;&lt;/a&gt; does a good job of explaining them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2) Debugging is a bitch:&lt;/strong&gt;Â This is mostly a personal opinion, but I found Node.js hard to debug than other languages I have used. It is really easy to get Â lost in the code and even debugging simple things take long time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3) Javascript was not made for server side:Â &lt;/strong&gt;Javascript is a popular widely used language that has been around for 20 years. When it was first created in 1995, it only took 10 hours for the creator to create it. This doesn&amp;rsquo;t mean the Javascript that was around in 1995 is the same as Javascript now, it has come a long way since then, but there are still things about Javascript that annoy the hell out of developers. It is a weak typed languageÂ which means debugging things is going to be a bit more difficult compared to strong typed languages. Javascript is only popular because it became the language of the web and almost every browser supports it. Using Javascript to program on server side feels like using a coffee cup to drink water, something about it doesn&amp;rsquo;t feel right. With Javascript replacements like &lt;a href=&#34;https://www.dartlang.org/&#34; target=&#34;_blank&#34;&gt;Google&amp;rsquo;s Dart&lt;/a&gt;Â gaining popularity for the client side, I can see Javascript slowly fading from he development scene.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4) Same code on both server and client side doesn&amp;rsquo;t really work:Â &lt;/strong&gt;One of the reasons I see developers switching to Node.js is because of &amp;ldquo;Javascript Everywhere&amp;rdquo; theory. I have built numerous apps using Node.js and I almost never had a place where I was able to share code between the server side and client side. If this was going to be your reason to start using Node.js, don&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5) The packages aren&amp;rsquo;t that good:Â &lt;/strong&gt;I love npm. That is probably the thing that i love the most about Node.js.Npm makes it extremely easy to install third party packages that you can use from/with the app you are building. But its not all rainbows and cookies with npm, what I found is almost half of the packages I find are either abandoned by their maintainers or are not well documented (heck, the biggest websocket library socket.io has a horribleÂ documentation) or are coded poorly. There are some really good packages that are frequently updated and maintained, but having to search through packages to find the right thing gets frustrating.&lt;/p&gt;

&lt;p&gt;So what now? Well I said all I had to say about Node.js. It is not a bad concept at all, but using Javascript on both server side and client side, companies could save money / time on development projects. But even though the concept is great, the implementation could have been better. Even developers that have maintained popular Node.js packages like &lt;a href=&#34;https://medium.com/code-adventures/farewell-node-js-4ba9e7f3e52b&#34; target=&#34;_blank&#34;&gt;TJ, the maintainer of Express.js&lt;/a&gt; have left the Node.js ecosystem because of the issues. Personally, I would say stay away from Node.js for now, at least till it gets a little more mature. If you are thinking about learning a new language, try &lt;a href=&#34;https://golang.org/&#34; target=&#34;_blank&#34;&gt;GoLang &lt;/a&gt;by Google. I have been experimenting with it lately and it&amp;rsquo;s fantastic so far.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>